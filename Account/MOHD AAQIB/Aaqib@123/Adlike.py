import telebotimport jsonimport requestsimport osfrom datetime import datetime, timedelta# Load bot token from environment variableBOT_TOKEN = os.getenv("BOT_TOKEN", "8003565462:AAEb869l0J_Ph9fgA9pCQnEFnuNIeZCsysw")bot = telebot.TeleBot(BOT_TOKEN)# Files for storing dataALLOWED_GROUPS_FILE = "allowed_groups.json"VIP_USERS_FILE = "vip_users.json"DAILY_USAGE_FILE = "daily_usage.json"# Main Admin IDMAIN_ADMIN_ID = 5112593221# API Key (store securely)API_KEY = os.getenv("API_KEY", "https://freefire-virusteam.vercel.app/ind/likes?key=23092003&uid={uid}")# Ensure JSON files existdef ensure_file_exists(filename):    if not os.path.exists(filename):        with open(filename, "w") as f:            json.dump({}, f)ensure_file_exists(ALLOWED_GROUPS_FILE)ensure_file_exists(VIP_USERS_FILE)ensure_file_exists(DAILY_USAGE_FILE)# Load JSON Datadef load_json(filename):    try:        with open(filename, "r") as f:            return json.load(f)    except (FileNotFoundError, json.JSONDecodeError):        return {}# Save JSON Datadef save_json(filename, data):    with open(filename, "w") as f:        json.dump(data, f, indent=4)# Check if user is main admindef is_main_admin(user_id):    return user_id == MAIN_ADMIN_ID# Check if group is alloweddef is_group_allowed(group_id):    allowed_groups = load_json(ALLOWED_GROUPS_FILE)    group_data = allowed_groups.get(str(group_id))    if group_data:        expiry_date = datetime.strptime(group_data["expiry_date"], "%Y-%m-%d")        if expiry_date >= datetime.now():            return True        else:            # Remove expired groups            del allowed_groups[str(group_id)]            save_json(ALLOWED_GROUPS_FILE, allowed_groups)        return False# Add group to allowed listdef set_allowed_group(group_id, daily_request, expiry_days):    allowed_groups = load_json(ALLOWED_GROUPS_FILE)    expiry_date = (datetime.now() + timedelta(days=expiry_days)).strftime("%Y-%m-%d")    allowed_groups[str(group_id)] = {"daily_request": daily_request, "expiry_date": expiry_date}    save_json(ALLOWED_GROUPS_FILE, allowed_groups)# Check if user is VIPdef is_vip_user(user_id):    vip_users = load_json(VIP_USERS_FILE)    user_data = vip_users.get(str(user_id))    if user_data:        expiry_date = datetime.strptime(user_data["expiry_date"], "%Y-%m-%d")        if expiry_date >= datetime.now():            return True        else:            # Remove expired VIP users            del vip_users[str(user_id)]            save_json(VIP_USERS_FILE, vip_users)        return False# Add VIP userdef set_vip_user(user_id, daily_request, expiry_days):    vip_users = load_json(VIP_USERS_FILE)    expiry_date = (datetime.now() + timedelta(days=expiry_days)).strftime("%Y-%m-%d")    vip_users[str(user_id)] = {"daily_request": daily_request, "expiry_date": expiry_date}    save_json(VIP_USERS_FILE, vip_users)# Check if user can use like commanddef can_use_like(user_id):    today = datetime.now().strftime("%Y-%m-%d")    data = load_json(DAILY_USAGE_FILE)    if data.get("date") != today:        data = {"date": today, "usage": {}}    limit = 1    if is_vip_user(user_id):        vip_users = load_json(VIP_USERS_FILE)        limit = vip_users.get(str(user_id), {}).get("daily_request", 1)    if data["usage"].get(str(user_id), 0) >= limit:        return False    data["usage"][str(user_id)] = data["usage"].get(str(user_id), 0) + 1    save_json(DAILY_USAGE_FILE, data)        return True# Command Handlers@bot.message_handler(commands=["allow"])def allow_group(message):    if not is_main_admin(message.from_user.id):        bot.reply_to(message, "❌ You are not authorized to use this command.")        return    try:        _, daily_requests, expiry_days = message.text.split(maxsplit=2)        set_allowed_group(message.chat.id, int(daily_requests), int(expiry_days))        bot.reply_to(message, f"✅ Group allowed with {daily_requests} daily requests for {expiry_days} days.")    except ValueError:        bot.reply_to(message, "❌ Invalid format! Use: /allow <daily_requests> <expiry_days>")@bot.message_handler(commands=["add"])def add_vip_user(message):    if not is_main_admin(message.from_user.id):        bot.reply_to(message, "❌ You are not authorized to use this command.")        return    try:        _, user_id, daily_requests, expiry_days = message.text.split(maxsplit=3)        set_vip_user(int(user_id), int(daily_requests), int(expiry_days))        bot.reply_to(message, f"✅ User {user_id} is now VIP with {daily_requests} daily requests for {expiry_days} days.")    except ValueError:        bot.reply_to(message, "❌ Invalid format! Use: /add <user_id> <daily_requests> <expiry_days>")@bot.message_handler(commands=["like"])def like_user(message):    if not is_group_allowed(message.chat.id):        bot.send_message(message.chat.id, "❌ Bot is not allowed in this group.", reply_to_message_id=message.message_id)        return    if not can_use_like(message.from_user.id):        bot.send_message(message.chat.id, "❌ You have exceeded your daily request limit. 📞 Please wait until the daily reset or contact @Mohd1_aaqib to upgrade your package!", reply_to_message_id=message.message_id)        return    try:        _, region, uid = message.text.split()    except ValueError:        bot.send_message(message.chat.id, "❌ Invalid format! Use: /like <region> <UID>", reply_to_message_id=message.message_id)        return    processing_message = bot.send_message(message.chat.id, "⏳ Please wait, processing your request...", reply_to_message_id=message.message_id)    # API Call for likes    api_url = API_KEY.format(uid=uid)        try:        response = requests.get(api_url).json()        print("API Response:", response)  # Debugging: Print response to check format    except requests.exceptions.RequestException:        bot.edit_message_text("❌ API request failed. Please try again later.", message.chat.id, processing_message.message_id)        return    # Handling different API responses    if "message" in response:        message_text = response["message"]        if "has reached the maximum likes" in message_text:            bot.edit_message_text(f"❌ {message_text}", message.chat.id, processing_message.message_id)            return        elif "doesn't support" in message_text:            bot.edit_message_text("❌ This server is not supported by the bot.", message.chat.id, processing_message.message_id)            return        elif "not exist in the Garena database" in message_text:            bot.edit_message_text("❌ Invalid UID! This ID does not exist or is not fully registered in a region.", message.chat.id, processing_message.message_id)            return    # Extract user details from successful response    player_data = response.get("UID Validated - API connected", {})    likes_data = response.get("Likes details", {})    if not player_data or not likes_data:        bot.edit_message_text("❌ An error occurred. Please check the account region or try again later.", message.chat.id, processing_message.message_id)        return    player_name = player_data.get("Name", "Unknown")    level = player_data.get("Level", "Unknown")    region = player_data.get("Region", "Unknown")        likes_before = likes_data.get("Likes Before CMD", 0)    likes_after = likes_data.get("Likes After CMD", 0)    likes_given = likes_data.get("Likes Given By API", 0)    # If likes are sent successfully, send the result    if likes_given > 0:        response_text = f"""✨ <b>LIKE SENT SUCCESS</b> ✨👤 <b>Name:</b> {player_name}🔹 <b>UID:</b> {uid}🌎 <b>Region:</b> {region}🎮 <b>Level:</b> {level}👍 <b>Likes Before:</b> {likes_before}👍 <b>Likes After:</b> {likes_after}❤️ <b>Likes Given By Bot:</b> {likes_given}📌 <b>Channel Support:</b> <a href="https://t.me/MOHD1LIKE">Join Karo</a>"""    else:        response_text = "❌ An error occurred. Please check the account region or try again later."    bot.edit_message_text(response_text, message.chat.id, processing_message.message_id, parse_mode="HTML")# Start the botbot.polling()